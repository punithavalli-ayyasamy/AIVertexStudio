name: train_tabular
description: Train AutoML Tabular model for crop yield prediction

inputs:
- {name: project_id, type: String, description: 'GCP project ID'}
- {name: region, type: String, description: 'GCP region'}
- {name: dataset, type: String, description: 'URI of the processed tabular dataset'}
- {name: min_accuracy, type: Float, description: 'Minimum required accuracy'}

outputs:
- {name: model_info, type: Dict, description: 'Model information including resource name and metrics'}

implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |
      python3 -m pip install --quiet google-cloud-aiplatform pandas numpy
      python3 -c '

      import sys
      import argparse
      from google.cloud import aiplatform

      import os
      
      # Get parameters from environment variables
      project_id = os.environ['PROJECT_ID']
      region = os.environ['REGION']
      dataset = os.environ['DATASET']
      min_accuracy = float(os.environ['MIN_ACCURACY'])

      # Initialize Vertex AI
      aiplatform.init(project=project_id, location=region)

      # Create dataset
      ai_dataset = aiplatform.TabularDataset.create(
          display_name="crop_tabular_dataset",
          gcs_source=dataset
      )

      # Train model
      job = aiplatform.AutoMLTabularTrainingJob(
          display_name="crop_tabular_model",
          optimization_objective="minimize-rmse",
          column_transformations=[
              {"numeric": {"column_name": "field_size"}},
              {"numeric": {"column_name": "rainfall"}},
              {"numeric": {"column_name": "temperature"}},
              {"categorical": {"column_name": "location"}},
              {"categorical": {"column_name": "crop_type"}},
              {"timestamp": {"column_name": "date"}}
          ],
          target_column="yield"
      )

      # Run the training job
      ai_model = job.run(
          dataset=ai_dataset,
          model_display_name="crop_yield_model",
          training_fraction_split=0.8,
          validation_fraction_split=0.1,
          test_fraction_split=0.1
      )

      # Get model evaluation
      eval_metrics = ai_model.list_model_evaluations()[0]

      # Check if model meets accuracy threshold
      if eval_metrics.metrics['rmse'] > min_accuracy:
          raise ValueError(f"Model RMSE {eval_metrics.metrics['rmse']} above threshold {min_accuracy}")

      # Print output as JSON for KFP
      import json
      model_info = {
          'model': ai_model.resource_name,
          'rmse': float(eval_metrics.metrics['rmse'])
      }
      print(json.dumps(model_info))
      '
    env:
      PROJECT_ID: {inputValue: project_id}
      REGION: {inputValue: region}
      DATASET: {inputValue: dataset}
      MIN_ACCURACY: {inputValue: min_accuracy}
