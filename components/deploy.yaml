name: deploy
description: Deploy trained models to endpoints

inputs:
- {name: project_id, type: String, description: 'GCP project ID'}
- {name: region, type: String, description: 'GCP region'}
- {name: vision_model, type: Dict, description: 'Vision model information'}
- {name: tabular_model, type: Dict, description: 'Tabular model information'}

outputs:
- {name: vision_endpoint, type: String, description: 'Vision model endpoint resource name'}
- {name: tabular_endpoint, type: String, description: 'Tabular model endpoint resource name'}

implementation:
  container:
    image: python:3.9
    command:
    - python3
    - -c
    - |
      import os
      import sys
      import argparse
      from google.cloud import aiplatform
      import json

      import sys
      import argparse
      import json
      from google.cloud import aiplatform

      import os
      
      # Get parameters from environment variables
      project_id = os.environ['PROJECT_ID']
      region = os.environ['REGION']
      vision_model_info = json.loads(os.environ['VISION_MODEL'])
      tabular_model_info = json.loads(os.environ['TABULAR_MODEL'])

      # Parse model information from JSON strings
      vision_model_info = json.loads(os.environ['VISION_MODEL'])
      tabular_model_info = json.loads(os.environ['TABULAR_MODEL'])

      # Initialize Vertex AI
      aiplatform.init(project=project_id, location=region)

      # Deploy vision model
      vision_model_resource = aiplatform.Model(vision_model_info['model'])
      vision_endpoint = vision_model_resource.deploy(
          machine_type='n1-standard-4',
          min_replica_count=1,
          max_replica_count=1
      )

      # Deploy tabular model
      tabular_model_resource = aiplatform.Model(tabular_model_info['model'])
      tabular_endpoint = tabular_model_resource.deploy(
          machine_type='n1-standard-4',
          min_replica_count=1,
          max_replica_count=1
      )

      # Print outputs for KFP
      print(vision_endpoint.resource_name)
      print(tabular_endpoint.resource_name)
      '
    args:
    - --project_id
    - {inputValue: project_id}
    - --region
    - {inputValue: region}
    - --vision_model
    - {inputValue: vision_model}
    - --tabular_model
    - {inputValue: tabular_model}
